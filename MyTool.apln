:Namespace MyTool

    ∇ VERSION_STRING←Version;APL_VERSION_RANGE
    ⍝ Bug fix #1 (GH issue #3)
    ⍝ Bug fix #2 (GH issue #4)
    ⍝ Bug fix #3 (GH issue #10)
    ⍝ Bug fix #4 (GH issue #11)
      APL_VERSION_RANGE←'180-'
      VERSION_STRING←'0.2.0'
    ∇

    github←'https://github.com/'
    dyalog_versions ← ↑(16 17 17.1 18 18.1 19)('160' '170' '171' '180' '181' '190')

    ∇ Run args;jarvis_dir;s
      jarvis_dir←2 ⎕NQ'.' 'GetEnvironment' 'JARVISDIR'
      :If 0=⎕NC'Jarvis'   ⍝ Load Jarvis
          2 ⎕FIX'file://',jarvis_dir
      :EndIf
      s←#.Server←⎕NEW Jarvis
      s.CodeLocation←'#.MyTool'
      s.IncludeFns←'GetURL'
      s.Start
    ∇

    ∇ releases←{credentials}ListReleases url;data;releases;protocol;_;owner;repo;cred;releasesurl;isdraft;releaseinfo;draftassets;publicassets;public;draft;GetDyalogVersions;publicDV;draftDV;draftinfo
    ⍝ credentials: optional path to credentials file
    ⍝              if included, draft releases may be listed
    ⍝              username:token
    ⍝              see https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token
    ⍝         url: repository url
    ⍝    releases: nested matrix, each row is (tag_name compatible_dyalog_versions asset_url)
      :If 0=⎕NC'HttpCommand'                                     ⍝ HttpCommand not found, import using SALT
          ⎕SE.SALT.Load'HttpCommand'
      :EndIf
      (protocol _ owner repo)←'/'(≠⊆⊢)url
      releasesurl←protocol,'//api.github.com/repos/',owner,'/',repo,'/releases'
    ⍝ Download releases data
      :If 0=⎕NC'credentials'                                     ⍝ No credentials, list public releases only
          data←(HttpCommand.Get releasesurl).Data
      :Else
          credentials←{⍵/⍨(∨\∧∘⌽∨\∘⌽)'"'≠⍵}credentials           ⍝ Remove double quotes " from path
          cred←(⊃⎕NGET credentials)~⎕UCS 10 13 32                ⍝ Remove spaces and newlines from credentials
          data←∊(⎕SH'curl -u ',cred,' ',releasesurl)
      :EndIf
    ⍝ Extract tag_name, compatible_dyalog_versions (DV), asset_url (assets)
      releaseinfo←⎕JSON data
      isdraft←(⊂⊂'true')∊⍨releaseinfo.draft
      public←(releaseinfo/⍨~isdraft)
      draft←isdraft/releaseinfo
      GetDyalogVersions←(⎕UCS 10 13)∘{⊃⌽':'(≠⊆⊢)⍺(⊃(~∊⍨)⊆⊢)⍵}¨   ⍝ Get compatible Dyalog versions
      publicDV←GetDyalogVersions public.body
      :If 0<≢draft                                               ⍝ Get info for draft versions if available
          draftDV←GetDyalogVersions draft.body
          draftassets←{¯2↓url↓⍨≢⊃'\[.*\]\('⎕S'&'⊢url←2⊃⍵(≠⊆⊣)⎕UCS 10}¨draft.body
          draftinfo←draft.tag_name,draftDV,⍪draftassets
      :Else
          draftinfo←0 3⍴⍬
      :EndIf
    ⍝ Get asset urls
      publicassets←(⊃¨public.assets).browser_download_url
    ⍝ Bring together releases information
      releases←(draftinfo)⍪(public.tag_name,publicDV,⍪publicassets)
    ∇

    ∇ url←GetURL(toolname dversion);releases;cversions;support;tversions;split;comp_support
   ⍝ Get url for release of TOOL to be included with build of DVERSION
      url←''
      releases←'credentials'ListReleases github,toolname
      cversions←dversion IsCompatibileWith releases[;2]
      :If ~∨/cversions
          url←'No compatible tool versions found'
          →0
      :EndIf
      tversions←1⌷⍤1⊢cversions⌿releases
      split←'.-'∘((~∊⍨)⊆⊢)¨tversions
      support←5=≢¨split
      comp_support←dversion∘{⍺=(dyalog_versions,¯1)[1;dyalog_versions[2;]⍳3⌷⍵]}¨support/split
      :If ∨/comp_support
     ⍝ Latest release of compatible support branch
          url←(⊂1 3)⊃(⊂∘⍒⌷⊢)support⌿releases
      :Else
     ⍝ Latest compatible release
          url←(⊂1 3)⊃(⊂∘⍒⌷⊢)releases⌿⍨~support
      :EndIf
    ∇

      IsCompatibileWith←{
   ⍝ ⍺: Dyalog version to include tool
   ⍝ ⍵: Release table from ListReleases
   ⍝ ←: Boolean vector of compatible tool releases
          tvers←' '∘(1↓,⊢⍤/⍨1(⊢∨⌽)0,≠)¨⍵
          single←'^\d+\.\d+$'
          min←'^\d+\.\d+-$'
          range←'^\d+\.\d+-\d+\.\d+$'
          multi←'^\d+\.\d+,[\d+\.\d+,?]+$'
          InRange←{2=+⌿∨⌿⍤2⊢⍵(∘.≤,[0.5]∘.≥)⍺}
          comp←⍺∘{6::0 ⋄ ⍺=⍎'-'~⍨⍵⌿⍨≢single ⎕S 1⊢⍵:1 ⋄ 0}¨tvers               ⍝ Equal to single compatible version
          comp∨←⍺∘{6::0 ⋄ ⍺≥⍎'-'~⍨⍵⌿⍨≢min ⎕S 1⊢⍵:1 ⋄ 0}¨tvers                 ⍝ Greater than minimum compatible version
          comp∨←⍺∘{6::0 ⋄ r←⍎¨'-'(≠⊆⊢)⍵⌿⍨≢range ⎕S 1⊢⍵ ⋄ ⍺ InRange r}¨tvers   ⍝ In range of compatible versions
          comp∨←⍺∘{6::0 ⋄ ⍺∊⍎¨','(≠⊆⊢)⍵⌿⍨≢multi ⎕S 1⊢⍵}¨tvers                 ⍝ Equal to one of several compatible versions
          comp
      }

:EndNamespace
